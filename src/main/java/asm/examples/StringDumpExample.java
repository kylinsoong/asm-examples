package asm.examples;

import static org.objectweb.asm.Opcodes.*;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;

public class StringDumpExample {
    
    public static byte[] dump () throws Exception {
        ClassWriter cw = new ClassWriter(0);
        FieldVisitor fv;
        MethodVisitor mv;
        AnnotationVisitor av0;
        
        cw.visit(V1_5, ACC_PUBLIC + ACC_FINAL + ACC_SUPER, "java/lang/String", "Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Comparable<Ljava/lang/String;>;Ljava/lang/CharSequence;", "java/lang/Object", new String[] { "java/io/Serializable", "java/lang/Comparable", "java/lang/CharSequence" });
   
        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL, "value", "[C", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL, "offset", "I", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL, "count", "I", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PRIVATE, "hash", "I", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "serialVersionUID", "J", null, new Long(-6849794470754667710L));
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "serialPersistentFields", "[Ljava/io/ObjectStreamField;", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC, "CASE_INSENSITIVE_ORDER", "Ljava/util/Comparator;", "Ljava/util/Comparator<Ljava/lang/String;>;", null);
            fv.visitEnd();
        }
        
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_0);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "offset", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_0);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "count", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_0);
            mv.visitIntInsn(NEWARRAY, T_CHAR);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 1);
            mv.visitEnd();
        }
        
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "(Ljava/lang/String;)V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
            mv.visitVarInsn(ALOAD, 1);
            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
            mv.visitVarInsn(ISTORE, 2);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
            mv.visitVarInsn(ASTORE, 3);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitVarInsn(ILOAD, 2);
            Label l0 = new Label();
            mv.visitJumpInsn(IF_ICMPLE, l0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
            mv.visitVarInsn(ISTORE, 5);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitInsn(IADD);
            mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "copyOfRange", "([CII)[C");
            mv.visitVarInsn(ASTORE, 4);
            Label l1 = new Label();
            mv.visitJumpInsn(GOTO, l1);
            mv.visitLabel(l0);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ASTORE, 4);
            mv.visitLabel(l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_0);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "offset", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "count", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 6);
            mv.visitEnd();
        }
        
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([C)V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_0);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "offset", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "count", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/StringValue", "from", "([C)[C");
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([CII)V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
            mv.visitVarInsn(ILOAD, 2);
            Label l0 = new Label();
            mv.visitJumpInsn(IFGE, l0);
            mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l0);
            mv.visitVarInsn(ILOAD, 3);
            Label l1 = new Label();
            mv.visitJumpInsn(IFGE, l1);
            mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l1);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitInsn(ISUB);
            Label l2 = new Label();
            mv.visitJumpInsn(IF_ICMPLE, l2);
            mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitInsn(IADD);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_0);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "offset", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "count", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitInsn(IADD);
            mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "copyOfRange", "([CII)[C");
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
            mv.visitInsn(RETURN);
            mv.visitMaxs(5, 4);
            mv.visitEnd();
        }
        
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([III)V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
            mv.visitVarInsn(ILOAD, 2);
            Label l0 = new Label();
            mv.visitJumpInsn(IFGE, l0);
            mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l0);
            mv.visitVarInsn(ILOAD, 3);
            Label l1 = new Label();
            mv.visitJumpInsn(IFGE, l1);
            mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l1);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitInsn(ISUB);
            Label l2 = new Label();
            mv.visitJumpInsn(IF_ICMPLE, l2);
            mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitInsn(IADD);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l2);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 4);
            mv.visitInsn(ICONST_1);
            mv.visitVarInsn(ISTORE, 5);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitInsn(IADD);
            mv.visitIntInsn(NEWARRAY, T_CHAR);
            mv.visitVarInsn(ASTORE, 6);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ISTORE, 7);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 8);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 9);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitVarInsn(ILOAD, 9);
            mv.visitVarInsn(ILOAD, 3);
            Label l4 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l4);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ILOAD, 7);
            mv.visitIincInsn(7, 1);
            mv.visitInsn(IALOAD);
            mv.visitVarInsn(ISTORE, 10);
            mv.visitVarInsn(ILOAD, 10);
            Label l5 = new Label();
            mv.visitJumpInsn(IFGE, l5);
            mv.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "()V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l5);
            mv.visitVarInsn(ILOAD, 5);
            Label l6 = new Label();
            mv.visitJumpInsn(IFGT, l6);
            mv.visitVarInsn(ILOAD, 8);
            mv.visitInsn(ICONST_1);
            mv.visitInsn(IADD);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitJumpInsn(IF_ICMPLT, l6);
            mv.visitVarInsn(ILOAD, 4);
            Label l7 = new Label();
            mv.visitJumpInsn(IFNE, l7);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitInsn(INEG);
            mv.visitInsn(ICONST_1);
            mv.visitInsn(IADD);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitInsn(IMUL);
            mv.visitIntInsn(BIPUSH, 10);
            mv.visitInsn(ISHL);
            mv.visitVarInsn(ILOAD, 9);
            mv.visitInsn(IDIV);
            mv.visitVarInsn(ISTORE, 4);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitIntInsn(BIPUSH, 10);
            mv.visitInsn(ISHR);
            mv.visitVarInsn(ISTORE, 4);
            mv.visitVarInsn(ILOAD, 4);
            Label l8 = new Label();
            mv.visitJumpInsn(IFGT, l8);
            mv.visitInsn(ICONST_1);
            mv.visitVarInsn(ISTORE, 4);
            mv.visitJumpInsn(GOTO, l8);
            mv.visitLabel(l7);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitInsn(ICONST_2);
            mv.visitInsn(IMUL);
            mv.visitVarInsn(ISTORE, 4);
            mv.visitLabel(l8);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitInsn(IADD);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitInsn(ICONST_2);
            mv.visitInsn(IMUL);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Math", "min", "(II)I");
            mv.visitVarInsn(ISTORE, 11);
            mv.visitVarInsn(ILOAD, 11);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitInsn(ISUB);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitVarInsn(ILOAD, 9);
            mv.visitInsn(ISUB);
            mv.visitInsn(ISUB);
            mv.visitVarInsn(ISTORE, 5);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ILOAD, 11);
            mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "copyOf", "([CI)[C");
            mv.visitVarInsn(ASTORE, 6);
            mv.visitLabel(l6);
            mv.visitVarInsn(ILOAD, 10);
            mv.visitLdcInsn(new Integer(65536));
            Label l9 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l9);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ILOAD, 8);
            mv.visitIincInsn(8, 1);
            mv.visitVarInsn(ILOAD, 10);
            mv.visitInsn(I2C);
            mv.visitInsn(CASTORE);
            Label l10 = new Label();
            mv.visitJumpInsn(GOTO, l10);
            mv.visitLabel(l9);
            mv.visitVarInsn(ILOAD, 10);
            mv.visitLdcInsn(new Integer(1114111));
            Label l11 = new Label();
            mv.visitJumpInsn(IF_ICMPGT, l11);
            mv.visitVarInsn(ILOAD, 10);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ILOAD, 8);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toSurrogates", "(I[CI)V");
            mv.visitIincInsn(8, 2);
            mv.visitIincInsn(5, -1);
            mv.visitJumpInsn(GOTO, l10);
            mv.visitLabel(l11);
            mv.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "()V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l10);
            mv.visitIincInsn(9, 1);
            mv.visitJumpInsn(GOTO, l3);
            mv.visitLabel(l4);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_0);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "offset", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ILOAD, 8);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "count", "I");
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 12);
            mv.visitEnd();
        }
        
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([III)V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
            mv.visitVarInsn(ILOAD, 2);
            Label l0 = new Label();
            mv.visitJumpInsn(IFGE, l0);
            mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l0);
            mv.visitVarInsn(ILOAD, 3);
            Label l1 = new Label();
            mv.visitJumpInsn(IFGE, l1);
            mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l1);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitInsn(ISUB);
            Label l2 = new Label();
            mv.visitJumpInsn(IF_ICMPLE, l2);
            mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitInsn(IADD);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l2);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 4);
            mv.visitInsn(ICONST_1);
            mv.visitVarInsn(ISTORE, 5);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitInsn(IADD);
            mv.visitIntInsn(NEWARRAY, T_CHAR);
            mv.visitVarInsn(ASTORE, 6);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ISTORE, 7);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 8);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 9);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitVarInsn(ILOAD, 9);
            mv.visitVarInsn(ILOAD, 3);
            Label l4 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l4);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ILOAD, 7);
            mv.visitIincInsn(7, 1);
            mv.visitInsn(IALOAD);
            mv.visitVarInsn(ISTORE, 10);
            mv.visitVarInsn(ILOAD, 10);
            Label l5 = new Label();
            mv.visitJumpInsn(IFGE, l5);
            mv.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "()V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l5);
            mv.visitVarInsn(ILOAD, 5);
            Label l6 = new Label();
            mv.visitJumpInsn(IFGT, l6);
            mv.visitVarInsn(ILOAD, 8);
            mv.visitInsn(ICONST_1);
            mv.visitInsn(IADD);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitJumpInsn(IF_ICMPLT, l6);
            mv.visitVarInsn(ILOAD, 4);
            Label l7 = new Label();
            mv.visitJumpInsn(IFNE, l7);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitInsn(INEG);
            mv.visitInsn(ICONST_1);
            mv.visitInsn(IADD);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitInsn(IMUL);
            mv.visitIntInsn(BIPUSH, 10);
            mv.visitInsn(ISHL);
            mv.visitVarInsn(ILOAD, 9);
            mv.visitInsn(IDIV);
            mv.visitVarInsn(ISTORE, 4);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitIntInsn(BIPUSH, 10);
            mv.visitInsn(ISHR);
            mv.visitVarInsn(ISTORE, 4);
            mv.visitVarInsn(ILOAD, 4);
            Label l8 = new Label();
            mv.visitJumpInsn(IFGT, l8);
            mv.visitInsn(ICONST_1);
            mv.visitVarInsn(ISTORE, 4);
            mv.visitJumpInsn(GOTO, l8);
            mv.visitLabel(l7);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitInsn(ICONST_2);
            mv.visitInsn(IMUL);
            mv.visitVarInsn(ISTORE, 4);
            mv.visitLabel(l8);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitInsn(IADD);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitInsn(ICONST_2);
            mv.visitInsn(IMUL);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Math", "min", "(II)I");
            mv.visitVarInsn(ISTORE, 11);
            mv.visitVarInsn(ILOAD, 11);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitInsn(ISUB);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitVarInsn(ILOAD, 9);
            mv.visitInsn(ISUB);
            mv.visitInsn(ISUB);
            mv.visitVarInsn(ISTORE, 5);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ILOAD, 11);
            mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "copyOf", "([CI)[C");
            mv.visitVarInsn(ASTORE, 6);
            mv.visitLabel(l6);
            mv.visitVarInsn(ILOAD, 10);
            mv.visitLdcInsn(new Integer(65536));
            Label l9 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l9);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ILOAD, 8);
            mv.visitIincInsn(8, 1);
            mv.visitVarInsn(ILOAD, 10);
            mv.visitInsn(I2C);
            mv.visitInsn(CASTORE);
            Label l10 = new Label();
            mv.visitJumpInsn(GOTO, l10);
            mv.visitLabel(l9);
            mv.visitVarInsn(ILOAD, 10);
            mv.visitLdcInsn(new Integer(1114111));
            Label l11 = new Label();
            mv.visitJumpInsn(IF_ICMPGT, l11);
            mv.visitVarInsn(ILOAD, 10);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitVarInsn(ILOAD, 8);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toSurrogates", "(I[CI)V");
            mv.visitIincInsn(8, 2);
            mv.visitIincInsn(5, -1);
            mv.visitJumpInsn(GOTO, l10);
            mv.visitLabel(l11);
            mv.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "()V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l10);
            mv.visitIincInsn(9, 1);
            mv.visitJumpInsn(GOTO, l3);
            mv.visitLabel(l4);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_0);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "offset", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ILOAD, 8);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "count", "I");
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 12);
            mv.visitEnd();
        }
        
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_DEPRECATED, "<init>", "([BI)V", null, null);
            {
            av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
            av0.visitEnd();
            }
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([BIII)V");
            mv.visitInsn(RETURN);
            mv.visitMaxs(5, 3);
            mv.visitEnd();
        }
        
        {
            mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "checkBounds", "([BII)V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ILOAD, 2);
            Label l0 = new Label();
            mv.visitJumpInsn(IFGE, l0);
            mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l0);
            mv.visitVarInsn(ILOAD, 1);
            Label l1 = new Label();
            mv.visitJumpInsn(IFGE, l1);
            mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l1);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitInsn(ISUB);
            Label l2 = new Label();
            mv.visitJumpInsn(IF_ICMPLE, l2);
            mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitInsn(IADD);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l2);
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 3);
            mv.visitEnd();
        }
        
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([BIILjava/lang/String;)V", null, new String[] { "java/io/UnsupportedEncodingException" });
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
            mv.visitVarInsn(ALOAD, 4);
            Label l0 = new Label();
            mv.visitJumpInsn(IFNONNULL, l0);
            mv.visitTypeInsn(NEW, "java/lang/NullPointerException");
            mv.visitInsn(DUP);
            mv.visitLdcInsn("charsetName");
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/NullPointerException", "<init>", "(Ljava/lang/String;)V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "checkBounds", "([BII)V");
            mv.visitVarInsn(ALOAD, 4);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/StringCoding", "decode", "(Ljava/lang/String;[BII)[C");
            mv.visitVarInsn(ASTORE, 5);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_0);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "offset", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "count", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 6);
            mv.visitEnd();
        }
        
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([BIILjava/nio/charset/Charset;)V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
            mv.visitVarInsn(ALOAD, 4);
            Label l0 = new Label();
            mv.visitJumpInsn(IFNONNULL, l0);
            mv.visitTypeInsn(NEW, "java/lang/NullPointerException");
            mv.visitInsn(DUP);
            mv.visitLdcInsn("charset");
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/NullPointerException", "<init>", "(Ljava/lang/String;)V");
            mv.visitInsn(ATHROW);
            mv.visitLabel(l0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "checkBounds", "([BII)V");
            mv.visitVarInsn(ALOAD, 4);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/StringCoding", "decode", "(Ljava/nio/charset/Charset;[BII)[C");
            mv.visitVarInsn(ASTORE, 5);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_0);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "offset", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "count", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 6);
            mv.visitEnd();
        }
        
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([BLjava/lang/String;)V", null, new String[] { "java/io/UnsupportedEncodingException" });
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([BIILjava/lang/String;)V");
            mv.visitInsn(RETURN);
            mv.visitMaxs(5, 3);
            mv.visitEnd();
        }
        
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([BLjava/nio/charset/Charset;)V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([BIILjava/nio/charset/Charset;)V");
            mv.visitInsn(RETURN);
            mv.visitMaxs(5, 3);
            mv.visitEnd();
        }
        
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([BII)V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "checkBounds", "([BII)V");
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/StringCoding", "decode", "([BII)[C");
            mv.visitVarInsn(ASTORE, 4);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_0);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "offset", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "count", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
            mv.visitInsn(RETURN);
            mv.visitMaxs(3, 5);
            mv.visitEnd();
        }
        
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([B)V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([BII)V");
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 2);
            mv.visitEnd();
        }
        
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "(Ljava/lang/StringBuffer;)V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuffer", "toString", "()Ljava/lang/String;");
            mv.visitVarInsn(ASTORE, 2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "count", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "offset", "I");
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 3);
            mv.visitEnd();
        }
        
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "(Ljava/lang/StringBuilder;)V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
            mv.visitVarInsn(ASTORE, 2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "count", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "offset", "I");
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 3);
            mv.visitEnd();
            }
            {
            mv = cw.visitMethod(0, "<init>", "(II[C)V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "offset", "I");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "count", "I");
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 4);
            mv.visitEnd();
            }
            {
            mv = cw.visitMethod(ACC_PUBLIC, "length", "()I", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
            mv.visitInsn(IRETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
            
            {
                mv = cw.visitMethod(ACC_PUBLIC, "isEmpty", "()Z", null, null);
                mv.visitCode();
                mv.visitVarInsn(ALOAD, 0);
                mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                Label l0 = new Label();
                mv.visitJumpInsn(IFNE, l0);
                mv.visitInsn(ICONST_1);
                Label l1 = new Label();
                mv.visitJumpInsn(GOTO, l1);
                mv.visitLabel(l0);
                mv.visitInsn(ICONST_0);
                mv.visitLabel(l1);
                mv.visitInsn(IRETURN);
                mv.visitMaxs(1, 1);
                mv.visitEnd();
                }
                {
                mv = cw.visitMethod(ACC_PUBLIC, "charAt", "(I)C", null, null);
                mv.visitCode();
                mv.visitVarInsn(ILOAD, 1);
                Label l0 = new Label();
                mv.visitJumpInsn(IFLT, l0);
                mv.visitVarInsn(ILOAD, 1);
                mv.visitVarInsn(ALOAD, 0);
                mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                Label l1 = new Label();
                mv.visitJumpInsn(IF_ICMPLT, l1);
                mv.visitLabel(l0);
                mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
                mv.visitInsn(DUP);
                mv.visitVarInsn(ILOAD, 1);
                mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
                mv.visitInsn(ATHROW);
                mv.visitLabel(l1);
                mv.visitVarInsn(ALOAD, 0);
                mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                mv.visitVarInsn(ILOAD, 1);
                mv.visitVarInsn(ALOAD, 0);
                mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                mv.visitInsn(IADD);
                mv.visitInsn(CALOAD);
                mv.visitInsn(IRETURN);
                mv.visitMaxs(3, 2);
                mv.visitEnd();
            }
                {
                    mv = cw.visitMethod(ACC_PUBLIC, "codePointAt", "(I)I", null, null);
                    mv.visitCode();
                    mv.visitVarInsn(ILOAD, 1);
                    Label l0 = new Label();
                    mv.visitJumpInsn(IFLT, l0);
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    Label l1 = new Label();
                    mv.visitJumpInsn(IF_ICMPLT, l1);
                    mv.visitLabel(l0);
                    mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
                    mv.visitInsn(DUP);
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
                    mv.visitInsn(ATHROW);
                    mv.visitLabel(l1);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitInsn(IADD);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitInsn(IADD);
                    mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "codePointAtImpl", "([CII)I");
                    mv.visitInsn(IRETURN);
                    mv.visitMaxs(4, 2);
                    mv.visitEnd();
              }
                
                {
                    mv = cw.visitMethod(ACC_PUBLIC, "codePointBefore", "(I)I", null, null);
                    mv.visitCode();
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitInsn(ICONST_1);
                    mv.visitInsn(ISUB);
                    mv.visitVarInsn(ISTORE, 2);
                    mv.visitVarInsn(ILOAD, 2);
                    Label l0 = new Label();
                    mv.visitJumpInsn(IFLT, l0);
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    Label l1 = new Label();
                    mv.visitJumpInsn(IF_ICMPLT, l1);
                    mv.visitLabel(l0);
                    mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
                    mv.visitInsn(DUP);
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
                    mv.visitInsn(ATHROW);
                    mv.visitLabel(l1);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitInsn(IADD);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "codePointBeforeImpl", "([CII)I");
                    mv.visitInsn(IRETURN);
                    mv.visitMaxs(3, 3);
                    mv.visitEnd();
                }
                
                {
                    mv = cw.visitMethod(ACC_PUBLIC, "codePointCount", "(II)I", null, null);
                    mv.visitCode();
                    mv.visitVarInsn(ILOAD, 1);
                    Label l0 = new Label();
                    mv.visitJumpInsn(IFLT, l0);
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitJumpInsn(IF_ICMPGT, l0);
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitVarInsn(ILOAD, 2);
                    Label l1 = new Label();
                    mv.visitJumpInsn(IF_ICMPLE, l1);
                    mv.visitLabel(l0);
                    mv.visitTypeInsn(NEW, "java/lang/IndexOutOfBoundsException");
                    mv.visitInsn(DUP);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IndexOutOfBoundsException", "<init>", "()V");
                    mv.visitInsn(ATHROW);
                    mv.visitLabel(l1);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitInsn(IADD);
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitInsn(ISUB);
                    mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "codePointCountImpl", "([CII)I");
                    mv.visitInsn(IRETURN);
                    mv.visitMaxs(4, 3);
                    mv.visitEnd();
                }
                
                {
                    mv = cw.visitMethod(ACC_PUBLIC, "offsetByCodePoints", "(II)I", null, null);
                    mv.visitCode();
                    mv.visitVarInsn(ILOAD, 1);
                    Label l0 = new Label();
                    mv.visitJumpInsn(IFLT, l0);
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    Label l1 = new Label();
                    mv.visitJumpInsn(IF_ICMPLE, l1);
                    mv.visitLabel(l0);
                    mv.visitTypeInsn(NEW, "java/lang/IndexOutOfBoundsException");
                    mv.visitInsn(DUP);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IndexOutOfBoundsException", "<init>", "()V");
                    mv.visitInsn(ATHROW);
                    mv.visitLabel(l1);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitInsn(IADD);
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "offsetByCodePointsImpl", "([CIIII)I");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitInsn(ISUB);
                    mv.visitInsn(IRETURN);
                    mv.visitMaxs(5, 3);
                    mv.visitEnd();
                }
                
                {
                    mv = cw.visitMethod(0, "getChars", "([CI)V", null, null);
                    mv.visitCode();
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
                    mv.visitInsn(RETURN);
                    mv.visitMaxs(5, 3);
                    mv.visitEnd();
                }
                
                {
                    mv = cw.visitMethod(ACC_PUBLIC, "getChars", "(II[CI)V", null, null);
                    mv.visitCode();
                    mv.visitVarInsn(ILOAD, 1);
                    Label l0 = new Label();
                    mv.visitJumpInsn(IFGE, l0);
                    mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
                    mv.visitInsn(DUP);
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
                    mv.visitInsn(ATHROW);
                    mv.visitLabel(l0);
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    Label l1 = new Label();
                    mv.visitJumpInsn(IF_ICMPLE, l1);
                    mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
                    mv.visitInsn(DUP);
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
                    mv.visitInsn(ATHROW);
                    mv.visitLabel(l1);
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitVarInsn(ILOAD, 2);
                    Label l2 = new Label();
                    mv.visitJumpInsn(IF_ICMPLE, l2);
                    mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
                    mv.visitInsn(DUP);
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitInsn(ISUB);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
                    mv.visitInsn(ATHROW);
                    mv.visitLabel(l2);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitInsn(IADD);
                    mv.visitVarInsn(ALOAD, 3);
                    mv.visitVarInsn(ILOAD, 4);
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitInsn(ISUB);
                    mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V");
                    mv.visitInsn(RETURN);
                    mv.visitMaxs(6, 5);
                    mv.visitEnd();
                }
                
                {
                    mv = cw.visitMethod(ACC_PUBLIC + ACC_DEPRECATED, "getBytes", "(II[BI)V", null, null);
                    {
                    av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
                    av0.visitEnd();
                    }
                    mv.visitCode();
                    mv.visitVarInsn(ILOAD, 1);
                    Label l0 = new Label();
                    mv.visitJumpInsn(IFGE, l0);
                    mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
                    mv.visitInsn(DUP);
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
                    mv.visitInsn(ATHROW);
                    mv.visitLabel(l0);
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    Label l1 = new Label();
                    mv.visitJumpInsn(IF_ICMPLE, l1);
                    mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
                    mv.visitInsn(DUP);
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
                    mv.visitInsn(ATHROW);
                    mv.visitLabel(l1);
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitVarInsn(ILOAD, 2);
                    Label l2 = new Label();
                    mv.visitJumpInsn(IF_ICMPLE, l2);
                    mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
                    mv.visitInsn(DUP);
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitInsn(ISUB);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V");
                    mv.visitInsn(ATHROW);
                    mv.visitLabel(l2);
                    mv.visitVarInsn(ILOAD, 4);
                    mv.visitVarInsn(ISTORE, 5);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitInsn(IADD);
                    mv.visitVarInsn(ISTORE, 6);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitInsn(IADD);
                    mv.visitVarInsn(ISTORE, 7);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ASTORE, 8);
                    Label l3 = new Label();
                    mv.visitLabel(l3);
                    mv.visitVarInsn(ILOAD, 7);
                    mv.visitVarInsn(ILOAD, 6);
                    Label l4 = new Label();
                    mv.visitJumpInsn(IF_ICMPGE, l4);
                    mv.visitVarInsn(ALOAD, 3);
                    mv.visitVarInsn(ILOAD, 5);
                    mv.visitIincInsn(5, 1);
                    mv.visitVarInsn(ALOAD, 8);
                    mv.visitVarInsn(ILOAD, 7);
                    mv.visitIincInsn(7, 1);
                    mv.visitInsn(CALOAD);
                    mv.visitInsn(I2B);
                    mv.visitInsn(BASTORE);
                    mv.visitJumpInsn(GOTO, l3);
                    mv.visitLabel(l4);
                    mv.visitInsn(RETURN);
                    mv.visitMaxs(4, 9);
                    mv.visitEnd();
                }
                
                {
                    mv = cw.visitMethod(ACC_PUBLIC, "getBytes", "(Ljava/lang/String;)[B", null, new String[] { "java/io/UnsupportedEncodingException" });
                    mv.visitCode();
                    mv.visitVarInsn(ALOAD, 1);
                    Label l0 = new Label();
                    mv.visitJumpInsn(IFNONNULL, l0);
                    mv.visitTypeInsn(NEW, "java/lang/NullPointerException");
                    mv.visitInsn(DUP);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/NullPointerException", "<init>", "()V");
                    mv.visitInsn(ATHROW);
                    mv.visitLabel(l0);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitMethodInsn(INVOKESTATIC, "java/lang/StringCoding", "encode", "(Ljava/lang/String;[CII)[B");
                    mv.visitInsn(ARETURN);
                    mv.visitMaxs(4, 2);
                    mv.visitEnd();
                    }
                
                {
                    mv = cw.visitMethod(ACC_PUBLIC, "getBytes", "(Ljava/nio/charset/Charset;)[B", null, null);
                    mv.visitCode();
                    mv.visitVarInsn(ALOAD, 1);
                    Label l0 = new Label();
                    mv.visitJumpInsn(IFNONNULL, l0);
                    mv.visitTypeInsn(NEW, "java/lang/NullPointerException");
                    mv.visitInsn(DUP);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/NullPointerException", "<init>", "()V");
                    mv.visitInsn(ATHROW);
                    mv.visitLabel(l0);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitMethodInsn(INVOKESTATIC, "java/lang/StringCoding", "encode", "(Ljava/nio/charset/Charset;[CII)[B");
                    mv.visitInsn(ARETURN);
                    mv.visitMaxs(4, 2);
                    mv.visitEnd();
               }
                
                {
                    mv = cw.visitMethod(ACC_PUBLIC, "getBytes", "()[B", null, null);
                    mv.visitCode();
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitMethodInsn(INVOKESTATIC, "java/lang/StringCoding", "encode", "([CII)[B");
                    mv.visitInsn(ARETURN);
                    mv.visitMaxs(3, 1);
                    mv.visitEnd();
                }
                
                {
                    mv = cw.visitMethod(ACC_PUBLIC, "equals", "(Ljava/lang/Object;)Z", null, null);
                    mv.visitCode();
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitVarInsn(ALOAD, 1);
                    Label l0 = new Label();
                    mv.visitJumpInsn(IF_ACMPNE, l0);
                    mv.visitInsn(ICONST_1);
                    mv.visitInsn(IRETURN);
                    mv.visitLabel(l0);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitTypeInsn(INSTANCEOF, "java/lang/String");
                    Label l1 = new Label();
                    mv.visitJumpInsn(IFEQ, l1);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitTypeInsn(CHECKCAST, "java/lang/String");
                    mv.visitVarInsn(ASTORE, 2);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitVarInsn(ISTORE, 3);
                    mv.visitVarInsn(ILOAD, 3);
                    mv.visitVarInsn(ALOAD, 2);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitJumpInsn(IF_ICMPNE, l1);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ASTORE, 4);
                    mv.visitVarInsn(ALOAD, 2);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ASTORE, 5);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ISTORE, 6);
                    mv.visitVarInsn(ALOAD, 2);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ISTORE, 7);
                    Label l2 = new Label();
                    mv.visitLabel(l2);
                    mv.visitVarInsn(ILOAD, 3);
                    mv.visitIincInsn(3, -1);
                    Label l3 = new Label();
                    mv.visitJumpInsn(IFEQ, l3);
                    mv.visitVarInsn(ALOAD, 4);
                    mv.visitVarInsn(ILOAD, 6);
                    mv.visitIincInsn(6, 1);
                    mv.visitInsn(CALOAD);
                    mv.visitVarInsn(ALOAD, 5);
                    mv.visitVarInsn(ILOAD, 7);
                    mv.visitIincInsn(7, 1);
                    mv.visitInsn(CALOAD);
                    mv.visitJumpInsn(IF_ICMPEQ, l2);
                    mv.visitInsn(ICONST_0);
                    mv.visitInsn(IRETURN);
                    mv.visitLabel(l3);
                    mv.visitInsn(ICONST_1);
                    mv.visitInsn(IRETURN);
                    mv.visitLabel(l1);
                    mv.visitInsn(ICONST_0);
                    mv.visitInsn(IRETURN);
                    mv.visitMaxs(3, 8);
                    mv.visitEnd();
                    }
                    {
                    mv = cw.visitMethod(ACC_PUBLIC, "contentEquals", "(Ljava/lang/StringBuffer;)Z", null, null);
                    mv.visitCode();
                    Label l0 = new Label();
                    Label l1 = new Label();
                    Label l2 = new Label();
                    mv.visitTryCatchBlock(l0, l1, l2, null);
                    Label l3 = new Label();
                    mv.visitTryCatchBlock(l2, l3, l2, null);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitInsn(DUP);
                    mv.visitVarInsn(ASTORE, 2);
                    mv.visitInsn(MONITORENTER);
                    mv.visitLabel(l0);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "contentEquals", "(Ljava/lang/CharSequence;)Z");
                    mv.visitVarInsn(ALOAD, 2);
                    mv.visitInsn(MONITOREXIT);
                    mv.visitLabel(l1);
                    mv.visitInsn(IRETURN);
                    mv.visitLabel(l2);
                    mv.visitVarInsn(ASTORE, 3);
                    mv.visitVarInsn(ALOAD, 2);
                    mv.visitInsn(MONITOREXIT);
                    mv.visitLabel(l3);
                    mv.visitVarInsn(ALOAD, 3);
                    mv.visitInsn(ATHROW);
                    mv.visitMaxs(2, 4);
                    mv.visitEnd();
                    }
                    {
                    mv = cw.visitMethod(ACC_PUBLIC, "contentEquals", "(Ljava/lang/CharSequence;)Z", null, null);
                    mv.visitCode();
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitMethodInsn(INVOKEINTERFACE, "java/lang/CharSequence", "length", "()I");
                    Label l0 = new Label();
                    mv.visitJumpInsn(IF_ICMPEQ, l0);
                    mv.visitInsn(ICONST_0);
                    mv.visitInsn(IRETURN);
                    mv.visitLabel(l0);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitTypeInsn(INSTANCEOF, "java/lang/AbstractStringBuilder");
                    Label l1 = new Label();
                    mv.visitJumpInsn(IFEQ, l1);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ASTORE, 2);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitTypeInsn(CHECKCAST, "java/lang/AbstractStringBuilder");
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "getValue", "()[C");
                    mv.visitVarInsn(ASTORE, 3);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ISTORE, 4);
                    mv.visitInsn(ICONST_0);
                    mv.visitVarInsn(ISTORE, 5);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitVarInsn(ISTORE, 6);
                    Label l2 = new Label();
                    mv.visitLabel(l2);
                    mv.visitVarInsn(ILOAD, 6);
                    mv.visitIincInsn(6, -1);
                    mv.visitJumpInsn(IFEQ, l1);
                    mv.visitVarInsn(ALOAD, 2);
                    mv.visitVarInsn(ILOAD, 4);
                    mv.visitIincInsn(4, 1);
                    mv.visitInsn(CALOAD);
                    mv.visitVarInsn(ALOAD, 3);
                    mv.visitVarInsn(ILOAD, 5);
                    mv.visitIincInsn(5, 1);
                    mv.visitInsn(CALOAD);
                    mv.visitJumpInsn(IF_ICMPEQ, l2);
                    mv.visitInsn(ICONST_0);
                    mv.visitInsn(IRETURN);
                    mv.visitLabel(l1);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z");
                    Label l3 = new Label();
                    mv.visitJumpInsn(IFEQ, l3);
                    mv.visitInsn(ICONST_1);
                    mv.visitInsn(IRETURN);
                    mv.visitLabel(l3);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ASTORE, 2);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ISTORE, 3);
                    mv.visitInsn(ICONST_0);
                    mv.visitVarInsn(ISTORE, 4);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitVarInsn(ISTORE, 5);
                    Label l4 = new Label();
                    mv.visitLabel(l4);
                    mv.visitVarInsn(ILOAD, 5);
                    mv.visitIincInsn(5, -1);
                    Label l5 = new Label();
                    mv.visitJumpInsn(IFEQ, l5);
                    mv.visitVarInsn(ALOAD, 2);
                    mv.visitVarInsn(ILOAD, 3);
                    mv.visitIincInsn(3, 1);
                    mv.visitInsn(CALOAD);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitVarInsn(ILOAD, 4);
                    mv.visitIincInsn(4, 1);
                    mv.visitMethodInsn(INVOKEINTERFACE, "java/lang/CharSequence", "charAt", "(I)C");
                    mv.visitJumpInsn(IF_ICMPEQ, l4);
                    mv.visitInsn(ICONST_0);
                    mv.visitInsn(IRETURN);
                    mv.visitLabel(l5);
                    mv.visitInsn(ICONST_1);
                    mv.visitInsn(IRETURN);
                    mv.visitMaxs(3, 7);
                    mv.visitEnd();
                    }
                    {
                    mv = cw.visitMethod(ACC_PUBLIC, "equalsIgnoreCase", "(Ljava/lang/String;)Z", null, null);
                    mv.visitCode();
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitVarInsn(ALOAD, 1);
                    Label l0 = new Label();
                    mv.visitJumpInsn(IF_ACMPNE, l0);
                    mv.visitInsn(ICONST_1);
                    Label l1 = new Label();
                    mv.visitJumpInsn(GOTO, l1);
                    mv.visitLabel(l0);
                    mv.visitVarInsn(ALOAD, 1);
                    Label l2 = new Label();
                    mv.visitJumpInsn(IFNULL, l2);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitJumpInsn(IF_ICMPNE, l2);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitInsn(ICONST_1);
                    mv.visitInsn(ICONST_0);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitInsn(ICONST_0);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "regionMatches", "(ZILjava/lang/String;II)Z");
                    mv.visitJumpInsn(IFEQ, l2);
                    mv.visitInsn(ICONST_1);
                    mv.visitJumpInsn(GOTO, l1);
                    mv.visitLabel(l2);
                    mv.visitInsn(ICONST_0);
                    mv.visitLabel(l1);
                    mv.visitInsn(IRETURN);
                    mv.visitMaxs(6, 2);
                    mv.visitEnd();
                    }
                    {
                    mv = cw.visitMethod(ACC_PUBLIC, "compareTo", "(Ljava/lang/String;)I", null, null);
                    mv.visitCode();
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitVarInsn(ISTORE, 2);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitVarInsn(ISTORE, 3);
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitVarInsn(ILOAD, 3);
                    mv.visitMethodInsn(INVOKESTATIC, "java/lang/Math", "min", "(II)I");
                    mv.visitVarInsn(ISTORE, 4);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ASTORE, 5);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ASTORE, 6);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ISTORE, 7);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ISTORE, 8);
                    mv.visitVarInsn(ILOAD, 7);
                    mv.visitVarInsn(ILOAD, 8);
                    Label l0 = new Label();
                    mv.visitJumpInsn(IF_ICMPNE, l0);
                    mv.visitVarInsn(ILOAD, 7);
                    mv.visitVarInsn(ISTORE, 9);
                    mv.visitVarInsn(ILOAD, 4);
                    mv.visitVarInsn(ILOAD, 7);
                    mv.visitInsn(IADD);
                    mv.visitVarInsn(ISTORE, 10);
                    Label l1 = new Label();
                    mv.visitLabel(l1);
                    mv.visitVarInsn(ILOAD, 9);
                    mv.visitVarInsn(ILOAD, 10);
                    Label l2 = new Label();
                    mv.visitJumpInsn(IF_ICMPGE, l2);
                    mv.visitVarInsn(ALOAD, 5);
                    mv.visitVarInsn(ILOAD, 9);
                    mv.visitInsn(CALOAD);
                    mv.visitVarInsn(ISTORE, 11);
                    mv.visitVarInsn(ALOAD, 6);
                    mv.visitVarInsn(ILOAD, 9);
                    mv.visitInsn(CALOAD);
                    mv.visitVarInsn(ISTORE, 12);
                    mv.visitVarInsn(ILOAD, 11);
                    mv.visitVarInsn(ILOAD, 12);
                    Label l3 = new Label();
                    mv.visitJumpInsn(IF_ICMPEQ, l3);
                    mv.visitVarInsn(ILOAD, 11);
                    mv.visitVarInsn(ILOAD, 12);
                    mv.visitInsn(ISUB);
                    mv.visitInsn(IRETURN);
                    mv.visitLabel(l3);
                    mv.visitIincInsn(9, 1);
                    mv.visitJumpInsn(GOTO, l1);
                    mv.visitLabel(l2);
                    Label l4 = new Label();
                    mv.visitJumpInsn(GOTO, l4);
                    mv.visitLabel(l0);
                    mv.visitVarInsn(ILOAD, 4);
                    mv.visitIincInsn(4, -1);
                    mv.visitJumpInsn(IFEQ, l4);
                    mv.visitVarInsn(ALOAD, 5);
                    mv.visitVarInsn(ILOAD, 7);
                    mv.visitIincInsn(7, 1);
                    mv.visitInsn(CALOAD);
                    mv.visitVarInsn(ISTORE, 9);
                    mv.visitVarInsn(ALOAD, 6);
                    mv.visitVarInsn(ILOAD, 8);
                    mv.visitIincInsn(8, 1);
                    mv.visitInsn(CALOAD);
                    mv.visitVarInsn(ISTORE, 10);
                    mv.visitVarInsn(ILOAD, 9);
                    mv.visitVarInsn(ILOAD, 10);
                    Label l5 = new Label();
                    mv.visitJumpInsn(IF_ICMPEQ, l5);
                    mv.visitVarInsn(ILOAD, 9);
                    mv.visitVarInsn(ILOAD, 10);
                    mv.visitInsn(ISUB);
                    mv.visitInsn(IRETURN);
                    mv.visitLabel(l5);
                    mv.visitJumpInsn(GOTO, l0);
                    mv.visitLabel(l4);
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitVarInsn(ILOAD, 3);
                    mv.visitInsn(ISUB);
                    mv.visitInsn(IRETURN);
                    mv.visitMaxs(2, 13);
                    mv.visitEnd();
                    }
                    {
                    mv = cw.visitMethod(ACC_PUBLIC, "compareToIgnoreCase", "(Ljava/lang/String;)I", null, null);
                    mv.visitCode();
                    mv.visitFieldInsn(GETSTATIC, "java/lang/String", "CASE_INSENSITIVE_ORDER", "Ljava/util/Comparator;");
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Comparator", "compare", "(Ljava/lang/Object;Ljava/lang/Object;)I");
                    mv.visitInsn(IRETURN);
                    mv.visitMaxs(3, 2);
                    mv.visitEnd();
                    }
                    {
                    mv = cw.visitMethod(ACC_PUBLIC, "regionMatches", "(ILjava/lang/String;II)Z", null, null);
                    mv.visitCode();
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ASTORE, 5);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitInsn(IADD);
                    mv.visitVarInsn(ISTORE, 6);
                    mv.visitVarInsn(ALOAD, 2);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ASTORE, 7);
                    mv.visitVarInsn(ALOAD, 2);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ILOAD, 3);
                    mv.visitInsn(IADD);
                    mv.visitVarInsn(ISTORE, 8);
                    mv.visitVarInsn(ILOAD, 3);
                    Label l0 = new Label();
                    mv.visitJumpInsn(IFLT, l0);
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitJumpInsn(IFLT, l0);
                    mv.visitVarInsn(ILOAD, 1);
                    mv.visitInsn(I2L);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitInsn(I2L);
                    mv.visitVarInsn(ILOAD, 4);
                    mv.visitInsn(I2L);
                    mv.visitInsn(LSUB);
                    mv.visitInsn(LCMP);
                    mv.visitJumpInsn(IFGT, l0);
                    mv.visitVarInsn(ILOAD, 3);
                    mv.visitInsn(I2L);
                    mv.visitVarInsn(ALOAD, 2);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitInsn(I2L);
                    mv.visitVarInsn(ILOAD, 4);
                    mv.visitInsn(I2L);
                    mv.visitInsn(LSUB);
                    mv.visitInsn(LCMP);
                    Label l1 = new Label();
                    mv.visitJumpInsn(IFLE, l1);
                    mv.visitLabel(l0);
                    mv.visitInsn(ICONST_0);
                    mv.visitInsn(IRETURN);
                    mv.visitLabel(l1);
                    mv.visitVarInsn(ILOAD, 4);
                    mv.visitIincInsn(4, -1);
                    Label l2 = new Label();
                    mv.visitJumpInsn(IFLE, l2);
                    mv.visitVarInsn(ALOAD, 5);
                    mv.visitVarInsn(ILOAD, 6);
                    mv.visitIincInsn(6, 1);
                    mv.visitInsn(CALOAD);
                    mv.visitVarInsn(ALOAD, 7);
                    mv.visitVarInsn(ILOAD, 8);
                    mv.visitIincInsn(8, 1);
                    mv.visitInsn(CALOAD);
                    mv.visitJumpInsn(IF_ICMPEQ, l1);
                    mv.visitInsn(ICONST_0);
                    mv.visitInsn(IRETURN);
                    mv.visitLabel(l2);
                    mv.visitInsn(ICONST_1);
                    mv.visitInsn(IRETURN);
                    mv.visitMaxs(6, 9);
                    mv.visitEnd();
                    }
                    {
                    mv = cw.visitMethod(ACC_PUBLIC, "regionMatches", "(ZILjava/lang/String;II)Z", null, null);
                    mv.visitCode();
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ASTORE, 6);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitInsn(IADD);
                    mv.visitVarInsn(ISTORE, 7);
                    mv.visitVarInsn(ALOAD, 3);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ASTORE, 8);
                    mv.visitVarInsn(ALOAD, 3);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ILOAD, 4);
                    mv.visitInsn(IADD);
                    mv.visitVarInsn(ISTORE, 9);
                    mv.visitVarInsn(ILOAD, 4);
                    Label l0 = new Label();
                    mv.visitJumpInsn(IFLT, l0);
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitJumpInsn(IFLT, l0);
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitInsn(I2L);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitInsn(I2L);
                    mv.visitVarInsn(ILOAD, 5);
                    mv.visitInsn(I2L);
                    mv.visitInsn(LSUB);
                    mv.visitInsn(LCMP);
                    mv.visitJumpInsn(IFGT, l0);
                    mv.visitVarInsn(ILOAD, 4);
                    mv.visitInsn(I2L);
                    mv.visitVarInsn(ALOAD, 3);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitInsn(I2L);
                    mv.visitVarInsn(ILOAD, 5);
                    mv.visitInsn(I2L);
                    mv.visitInsn(LSUB);
                    mv.visitInsn(LCMP);
                    Label l1 = new Label();
                    mv.visitJumpInsn(IFLE, l1);
                    mv.visitLabel(l0);
                    mv.visitInsn(ICONST_0);
                    mv.visitInsn(IRETURN);
                    mv.visitLabel(l1);
                    mv.visitVarInsn(ILOAD, 5);
                    mv.visitIincInsn(5, -1);
                    Label l2 = new Label();
                    mv.visitJumpInsn(IFLE, l2);
                    mv.visitVarInsn(ALOAD, 6);
                    mv.visitVarInsn(ILOAD, 7);
                    mv.visitIincInsn(7, 1);
                    mv.visitInsn(CALOAD);
                    mv.visitVarInsn(ISTORE, 10);
                    mv.visitVarInsn(ALOAD, 8);
                    mv.visitVarInsn(ILOAD, 9);
                    mv.visitIincInsn(9, 1);
                    mv.visitInsn(CALOAD);
                    mv.visitVarInsn(ISTORE, 11);
                    mv.visitVarInsn(ILOAD, 10);
                    mv.visitVarInsn(ILOAD, 11);
                    Label l3 = new Label();
                    mv.visitJumpInsn(IF_ICMPNE, l3);
                    mv.visitJumpInsn(GOTO, l1);
                    mv.visitLabel(l3);
                    mv.visitVarInsn(ILOAD, 1);
                    Label l4 = new Label();
                    mv.visitJumpInsn(IFEQ, l4);
                    mv.visitVarInsn(ILOAD, 10);
                    mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toUpperCase", "(C)C");
                    mv.visitVarInsn(ISTORE, 12);
                    mv.visitVarInsn(ILOAD, 11);
                    mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toUpperCase", "(C)C");
                    mv.visitVarInsn(ISTORE, 13);
                    mv.visitVarInsn(ILOAD, 12);
                    mv.visitVarInsn(ILOAD, 13);
                    Label l5 = new Label();
                    mv.visitJumpInsn(IF_ICMPNE, l5);
                    mv.visitJumpInsn(GOTO, l1);
                    mv.visitLabel(l5);
                    mv.visitVarInsn(ILOAD, 12);
                    mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toLowerCase", "(C)C");
                    mv.visitVarInsn(ILOAD, 13);
                    mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toLowerCase", "(C)C");
                    mv.visitJumpInsn(IF_ICMPNE, l4);
                    mv.visitJumpInsn(GOTO, l1);
                    mv.visitLabel(l4);
                    mv.visitInsn(ICONST_0);
                    mv.visitInsn(IRETURN);
                    mv.visitLabel(l2);
                    mv.visitInsn(ICONST_1);
                    mv.visitInsn(IRETURN);
                    mv.visitMaxs(6, 14);
                    mv.visitEnd();
                    }
                    {
                    mv = cw.visitMethod(ACC_PUBLIC, "startsWith", "(Ljava/lang/String;I)Z", null, null);
                    mv.visitCode();
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ASTORE, 3);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitInsn(IADD);
                    mv.visitVarInsn(ISTORE, 4);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                    mv.visitVarInsn(ASTORE, 5);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                    mv.visitVarInsn(ISTORE, 6);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitVarInsn(ISTORE, 7);
                    mv.visitVarInsn(ILOAD, 2);
                    Label l0 = new Label();
                    mv.visitJumpInsn(IFLT, l0);
                    mv.visitVarInsn(ILOAD, 2);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                    mv.visitVarInsn(ILOAD, 7);
                    mv.visitInsn(ISUB);
                    Label l1 = new Label();
                    mv.visitJumpInsn(IF_ICMPLE, l1);
                    mv.visitLabel(l0);
                    mv.visitInsn(ICONST_0);
                    mv.visitInsn(IRETURN);
                    mv.visitLabel(l1);
                    mv.visitIincInsn(7, -1);
                    mv.visitVarInsn(ILOAD, 7);
                    Label l2 = new Label();
                    mv.visitJumpInsn(IFLT, l2);
                    mv.visitVarInsn(ALOAD, 3);
                    mv.visitVarInsn(ILOAD, 4);
                    mv.visitIincInsn(4, 1);
                    mv.visitInsn(CALOAD);
                    mv.visitVarInsn(ALOAD, 5);
                    mv.visitVarInsn(ILOAD, 6);
                    mv.visitIincInsn(6, 1);
                    mv.visitInsn(CALOAD);
                    mv.visitJumpInsn(IF_ICMPEQ, l1);
                    mv.visitInsn(ICONST_0);
                    mv.visitInsn(IRETURN);
                    mv.visitLabel(l2);
                    mv.visitInsn(ICONST_1);
                    mv.visitInsn(IRETURN);
                    mv.visitMaxs(3, 8);
                    mv.visitEnd();
                }
                    
                    {
                        mv = cw.visitMethod(ACC_PUBLIC, "startsWith", "(Ljava/lang/String;)Z", null, null);
                        mv.visitCode();
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitVarInsn(ALOAD, 1);
                        mv.visitInsn(ICONST_0);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;I)Z");
                        mv.visitInsn(IRETURN);
                        mv.visitMaxs(3, 2);
                        mv.visitEnd();
                        }
                        {
                        mv = cw.visitMethod(ACC_PUBLIC, "endsWith", "(Ljava/lang/String;)Z", null, null);
                        mv.visitCode();
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitVarInsn(ALOAD, 1);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                        mv.visitVarInsn(ALOAD, 1);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                        mv.visitInsn(ISUB);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;I)Z");
                        mv.visitInsn(IRETURN);
                        mv.visitMaxs(4, 2);
                        mv.visitEnd();
                        }
                        {
                        mv = cw.visitMethod(ACC_PUBLIC, "hashCode", "()I", null, null);
                        mv.visitCode();
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "hash", "I");
                        mv.visitVarInsn(ISTORE, 1);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                        mv.visitVarInsn(ISTORE, 2);
                        mv.visitVarInsn(ILOAD, 1);
                        Label l0 = new Label();
                        mv.visitJumpInsn(IFNE, l0);
                        mv.visitVarInsn(ILOAD, 2);
                        mv.visitJumpInsn(IFLE, l0);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                        mv.visitVarInsn(ISTORE, 3);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                        mv.visitVarInsn(ASTORE, 4);
                        mv.visitInsn(ICONST_0);
                        mv.visitVarInsn(ISTORE, 5);
                        Label l1 = new Label();
                        mv.visitLabel(l1);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitVarInsn(ILOAD, 2);
                        Label l2 = new Label();
                        mv.visitJumpInsn(IF_ICMPGE, l2);
                        mv.visitIntInsn(BIPUSH, 31);
                        mv.visitVarInsn(ILOAD, 1);
                        mv.visitInsn(IMUL);
                        mv.visitVarInsn(ALOAD, 4);
                        mv.visitVarInsn(ILOAD, 3);
                        mv.visitIincInsn(3, 1);
                        mv.visitInsn(CALOAD);
                        mv.visitInsn(IADD);
                        mv.visitVarInsn(ISTORE, 1);
                        mv.visitIincInsn(5, 1);
                        mv.visitJumpInsn(GOTO, l1);
                        mv.visitLabel(l2);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitVarInsn(ILOAD, 1);
                        mv.visitFieldInsn(PUTFIELD, "java/lang/String", "hash", "I");
                        mv.visitLabel(l0);
                        mv.visitVarInsn(ILOAD, 1);
                        mv.visitInsn(IRETURN);
                        mv.visitMaxs(3, 6);
                        mv.visitEnd();
                        }
                        {
                        mv = cw.visitMethod(ACC_PUBLIC, "indexOf", "(I)I", null, null);
                        mv.visitCode();
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitVarInsn(ILOAD, 1);
                        mv.visitInsn(ICONST_0);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "indexOf", "(II)I");
                        mv.visitInsn(IRETURN);
                        mv.visitMaxs(3, 2);
                        mv.visitEnd();
                        }
                        {
                        mv = cw.visitMethod(ACC_PUBLIC, "indexOf", "(II)I", null, null);
                        mv.visitCode();
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                        mv.visitInsn(IADD);
                        mv.visitVarInsn(ISTORE, 3);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                        mv.visitVarInsn(ASTORE, 4);
                        mv.visitVarInsn(ILOAD, 2);
                        Label l0 = new Label();
                        mv.visitJumpInsn(IFGE, l0);
                        mv.visitInsn(ICONST_0);
                        mv.visitVarInsn(ISTORE, 2);
                        Label l1 = new Label();
                        mv.visitJumpInsn(GOTO, l1);
                        mv.visitLabel(l0);
                        mv.visitVarInsn(ILOAD, 2);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                        mv.visitJumpInsn(IF_ICMPLT, l1);
                        mv.visitInsn(ICONST_M1);
                        mv.visitInsn(IRETURN);
                        mv.visitLabel(l1);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                        mv.visitVarInsn(ILOAD, 2);
                        mv.visitInsn(IADD);
                        mv.visitVarInsn(ISTORE, 5);
                        mv.visitVarInsn(ILOAD, 1);
                        mv.visitLdcInsn(new Integer(65536));
                        Label l2 = new Label();
                        mv.visitJumpInsn(IF_ICMPGE, l2);
                        Label l3 = new Label();
                        mv.visitLabel(l3);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitVarInsn(ILOAD, 3);
                        Label l4 = new Label();
                        mv.visitJumpInsn(IF_ICMPGE, l4);
                        mv.visitVarInsn(ALOAD, 4);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitInsn(CALOAD);
                        mv.visitVarInsn(ILOAD, 1);
                        Label l5 = new Label();
                        mv.visitJumpInsn(IF_ICMPNE, l5);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                        mv.visitInsn(ISUB);
                        mv.visitInsn(IRETURN);
                        mv.visitLabel(l5);
                        mv.visitIincInsn(5, 1);
                        mv.visitJumpInsn(GOTO, l3);
                        mv.visitLabel(l4);
                        mv.visitInsn(ICONST_M1);
                        mv.visitInsn(IRETURN);
                        mv.visitLabel(l2);
                        mv.visitVarInsn(ILOAD, 1);
                        mv.visitLdcInsn(new Integer(1114111));
                        Label l6 = new Label();
                        mv.visitJumpInsn(IF_ICMPGT, l6);
                        mv.visitVarInsn(ILOAD, 1);
                        mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toChars", "(I)[C");
                        mv.visitVarInsn(ASTORE, 6);
                        Label l7 = new Label();
                        mv.visitLabel(l7);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitVarInsn(ILOAD, 3);
                        mv.visitJumpInsn(IF_ICMPGE, l6);
                        mv.visitVarInsn(ALOAD, 4);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitInsn(CALOAD);
                        mv.visitVarInsn(ALOAD, 6);
                        mv.visitInsn(ICONST_0);
                        mv.visitInsn(CALOAD);
                        Label l8 = new Label();
                        mv.visitJumpInsn(IF_ICMPNE, l8);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitInsn(ICONST_1);
                        mv.visitInsn(IADD);
                        mv.visitVarInsn(ILOAD, 3);
                        Label l9 = new Label();
                        mv.visitJumpInsn(IF_ICMPNE, l9);
                        mv.visitJumpInsn(GOTO, l6);
                        mv.visitLabel(l9);
                        mv.visitVarInsn(ALOAD, 4);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitInsn(ICONST_1);
                        mv.visitInsn(IADD);
                        mv.visitInsn(CALOAD);
                        mv.visitVarInsn(ALOAD, 6);
                        mv.visitInsn(ICONST_1);
                        mv.visitInsn(CALOAD);
                        mv.visitJumpInsn(IF_ICMPNE, l8);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                        mv.visitInsn(ISUB);
                        mv.visitInsn(IRETURN);
                        mv.visitLabel(l8);
                        mv.visitIincInsn(5, 1);
                        mv.visitJumpInsn(GOTO, l7);
                        mv.visitLabel(l6);
                        mv.visitInsn(ICONST_M1);
                        mv.visitInsn(IRETURN);
                        mv.visitMaxs(3, 7);
                        mv.visitEnd();
                        }
                        {
                        mv = cw.visitMethod(ACC_PUBLIC, "lastIndexOf", "(I)I", null, null);
                        mv.visitCode();
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitVarInsn(ILOAD, 1);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                        mv.visitInsn(ICONST_1);
                        mv.visitInsn(ISUB);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "lastIndexOf", "(II)I");
                        mv.visitInsn(IRETURN);
                        mv.visitMaxs(4, 2);
                        mv.visitEnd();
                        }
                        {
                        mv = cw.visitMethod(ACC_PUBLIC, "lastIndexOf", "(II)I", null, null);
                        mv.visitCode();
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                        mv.visitVarInsn(ISTORE, 3);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                        mv.visitVarInsn(ASTORE, 4);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                        mv.visitVarInsn(ILOAD, 2);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                        Label l0 = new Label();
                        mv.visitJumpInsn(IF_ICMPLT, l0);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                        mv.visitInsn(ICONST_1);
                        mv.visitInsn(ISUB);
                        Label l1 = new Label();
                        mv.visitJumpInsn(GOTO, l1);
                        mv.visitLabel(l0);
                        mv.visitVarInsn(ILOAD, 2);
                        mv.visitLabel(l1);
                        mv.visitInsn(IADD);
                        mv.visitVarInsn(ISTORE, 5);
                        mv.visitVarInsn(ILOAD, 1);
                        mv.visitLdcInsn(new Integer(65536));
                        Label l2 = new Label();
                        mv.visitJumpInsn(IF_ICMPGE, l2);
                        Label l3 = new Label();
                        mv.visitLabel(l3);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitVarInsn(ILOAD, 3);
                        Label l4 = new Label();
                        mv.visitJumpInsn(IF_ICMPLT, l4);
                        mv.visitVarInsn(ALOAD, 4);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitInsn(CALOAD);
                        mv.visitVarInsn(ILOAD, 1);
                        Label l5 = new Label();
                        mv.visitJumpInsn(IF_ICMPNE, l5);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                        mv.visitInsn(ISUB);
                        mv.visitInsn(IRETURN);
                        mv.visitLabel(l5);
                        mv.visitIincInsn(5, -1);
                        mv.visitJumpInsn(GOTO, l3);
                        mv.visitLabel(l4);
                        mv.visitInsn(ICONST_M1);
                        mv.visitInsn(IRETURN);
                        mv.visitLabel(l2);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                        mv.visitInsn(IADD);
                        mv.visitVarInsn(ISTORE, 6);
                        mv.visitVarInsn(ILOAD, 1);
                        mv.visitLdcInsn(new Integer(1114111));
                        Label l6 = new Label();
                        mv.visitJumpInsn(IF_ICMPGT, l6);
                        mv.visitVarInsn(ILOAD, 1);
                        mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toChars", "(I)[C");
                        mv.visitVarInsn(ASTORE, 7);
                        Label l7 = new Label();
                        mv.visitLabel(l7);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitVarInsn(ILOAD, 3);
                        mv.visitJumpInsn(IF_ICMPLT, l6);
                        mv.visitVarInsn(ALOAD, 4);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitInsn(CALOAD);
                        mv.visitVarInsn(ALOAD, 7);
                        mv.visitInsn(ICONST_0);
                        mv.visitInsn(CALOAD);
                        Label l8 = new Label();
                        mv.visitJumpInsn(IF_ICMPNE, l8);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitInsn(ICONST_1);
                        mv.visitInsn(IADD);
                        mv.visitVarInsn(ILOAD, 6);
                        Label l9 = new Label();
                        mv.visitJumpInsn(IF_ICMPNE, l9);
                        mv.visitJumpInsn(GOTO, l6);
                        mv.visitLabel(l9);
                        mv.visitVarInsn(ALOAD, 4);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitInsn(ICONST_1);
                        mv.visitInsn(IADD);
                        mv.visitInsn(CALOAD);
                        mv.visitVarInsn(ALOAD, 7);
                        mv.visitInsn(ICONST_1);
                        mv.visitInsn(CALOAD);
                        mv.visitJumpInsn(IF_ICMPNE, l8);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                        mv.visitInsn(ISUB);
                        mv.visitInsn(IRETURN);
                        mv.visitLabel(l8);
                        mv.visitIincInsn(5, -1);
                        mv.visitJumpInsn(GOTO, l7);
                        mv.visitLabel(l6);
                        mv.visitInsn(ICONST_M1);
                        mv.visitInsn(IRETURN);
                        mv.visitMaxs(3, 8);
                        mv.visitEnd();
                        }
                        {
                        mv = cw.visitMethod(ACC_PUBLIC, "indexOf", "(Ljava/lang/String;)I", null, null);
                        mv.visitCode();
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitVarInsn(ALOAD, 1);
                        mv.visitInsn(ICONST_0);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "indexOf", "(Ljava/lang/String;I)I");
                        mv.visitInsn(IRETURN);
                        mv.visitMaxs(3, 2);
                        mv.visitEnd();
                        }
                        {
                        mv = cw.visitMethod(ACC_PUBLIC, "indexOf", "(Ljava/lang/String;I)I", null, null);
                        mv.visitCode();
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                        mv.visitVarInsn(ALOAD, 1);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                        mv.visitVarInsn(ALOAD, 1);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                        mv.visitVarInsn(ALOAD, 1);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                        mv.visitVarInsn(ILOAD, 2);
                        mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "indexOf", "([CII[CIII)I");
                        mv.visitInsn(IRETURN);
                        mv.visitMaxs(7, 3);
                        mv.visitEnd();
                        }
                        {
                        mv = cw.visitMethod(ACC_STATIC, "indexOf", "([CII[CIII)I", null, null);
                        mv.visitCode();
                        mv.visitVarInsn(ILOAD, 6);
                        mv.visitVarInsn(ILOAD, 2);
                        Label l0 = new Label();
                        mv.visitJumpInsn(IF_ICMPLT, l0);
                        mv.visitVarInsn(ILOAD, 5);
                        Label l1 = new Label();
                        mv.visitJumpInsn(IFNE, l1);
                        mv.visitVarInsn(ILOAD, 2);
                        Label l2 = new Label();
                        mv.visitJumpInsn(GOTO, l2);
                        mv.visitLabel(l1);
                        mv.visitInsn(ICONST_M1);
                        mv.visitLabel(l2);
                        mv.visitInsn(IRETURN);
                        mv.visitLabel(l0);
                        mv.visitVarInsn(ILOAD, 6);
                        Label l3 = new Label();
                        mv.visitJumpInsn(IFGE, l3);
                        mv.visitInsn(ICONST_0);
                        mv.visitVarInsn(ISTORE, 6);
                        mv.visitLabel(l3);
                        mv.visitVarInsn(ILOAD, 5);
                        Label l4 = new Label();
                        mv.visitJumpInsn(IFNE, l4);
                        mv.visitVarInsn(ILOAD, 6);
                        mv.visitInsn(IRETURN);
                        mv.visitLabel(l4);
                        mv.visitVarInsn(ALOAD, 3);
                        mv.visitVarInsn(ILOAD, 4);
                        mv.visitInsn(CALOAD);
                        mv.visitVarInsn(ISTORE, 7);
                        mv.visitVarInsn(ILOAD, 1);
                        mv.visitVarInsn(ILOAD, 2);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitInsn(ISUB);
                        mv.visitInsn(IADD);
                        mv.visitVarInsn(ISTORE, 8);
                        mv.visitVarInsn(ILOAD, 1);
                        mv.visitVarInsn(ILOAD, 6);
                        mv.visitInsn(IADD);
                        mv.visitVarInsn(ISTORE, 9);
                        Label l5 = new Label();
                        mv.visitLabel(l5);
                        mv.visitVarInsn(ILOAD, 9);
                        mv.visitVarInsn(ILOAD, 8);
                        Label l6 = new Label();
                        mv.visitJumpInsn(IF_ICMPGT, l6);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitVarInsn(ILOAD, 9);
                        mv.visitInsn(CALOAD);
                        mv.visitVarInsn(ILOAD, 7);
                        Label l7 = new Label();
                        mv.visitJumpInsn(IF_ICMPEQ, l7);
                        Label l8 = new Label();
                        mv.visitLabel(l8);
                        mv.visitIincInsn(9, 1);
                        mv.visitVarInsn(ILOAD, 9);
                        mv.visitVarInsn(ILOAD, 8);
                        mv.visitJumpInsn(IF_ICMPGT, l7);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitVarInsn(ILOAD, 9);
                        mv.visitInsn(CALOAD);
                        mv.visitVarInsn(ILOAD, 7);
                        mv.visitJumpInsn(IF_ICMPEQ, l7);
                        mv.visitJumpInsn(GOTO, l8);
                        mv.visitLabel(l7);
                        mv.visitVarInsn(ILOAD, 9);
                        mv.visitVarInsn(ILOAD, 8);
                        Label l9 = new Label();
                        mv.visitJumpInsn(IF_ICMPGT, l9);
                        mv.visitVarInsn(ILOAD, 9);
                        mv.visitInsn(ICONST_1);
                        mv.visitInsn(IADD);
                        mv.visitVarInsn(ISTORE, 10);
                        mv.visitVarInsn(ILOAD, 10);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitInsn(IADD);
                        mv.visitInsn(ICONST_1);
                        mv.visitInsn(ISUB);
                        mv.visitVarInsn(ISTORE, 11);
                        mv.visitVarInsn(ILOAD, 4);
                        mv.visitInsn(ICONST_1);
                        mv.visitInsn(IADD);
                        mv.visitVarInsn(ISTORE, 12);
                        Label l10 = new Label();
                        mv.visitLabel(l10);
                        mv.visitVarInsn(ILOAD, 10);
                        mv.visitVarInsn(ILOAD, 11);
                        Label l11 = new Label();
                        mv.visitJumpInsn(IF_ICMPGE, l11);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitVarInsn(ILOAD, 10);
                        mv.visitInsn(CALOAD);
                        mv.visitVarInsn(ALOAD, 3);
                        mv.visitVarInsn(ILOAD, 12);
                        mv.visitInsn(CALOAD);
                        mv.visitJumpInsn(IF_ICMPNE, l11);
                        mv.visitIincInsn(10, 1);
                        mv.visitIincInsn(12, 1);
                        mv.visitJumpInsn(GOTO, l10);
                        mv.visitLabel(l11);
                        mv.visitVarInsn(ILOAD, 10);
                        mv.visitVarInsn(ILOAD, 11);
                        mv.visitJumpInsn(IF_ICMPNE, l9);
                        mv.visitVarInsn(ILOAD, 9);
                        mv.visitVarInsn(ILOAD, 1);
                        mv.visitInsn(ISUB);
                        mv.visitInsn(IRETURN);
                        mv.visitLabel(l9);
                        mv.visitIincInsn(9, 1);
                        mv.visitJumpInsn(GOTO, l5);
                        mv.visitLabel(l6);
                        mv.visitInsn(ICONST_M1);
                        mv.visitInsn(IRETURN);
                        mv.visitMaxs(3, 13);
                        mv.visitEnd();
                        }
                        {
                        mv = cw.visitMethod(ACC_PUBLIC, "lastIndexOf", "(Ljava/lang/String;)I", null, null);
                        mv.visitCode();
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitVarInsn(ALOAD, 1);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "lastIndexOf", "(Ljava/lang/String;I)I");
                        mv.visitInsn(IRETURN);
                        mv.visitMaxs(3, 2);
                        mv.visitEnd();
                        }
                        {
                        mv = cw.visitMethod(ACC_PUBLIC, "lastIndexOf", "(Ljava/lang/String;I)I", null, null);
                        mv.visitCode();
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                        mv.visitVarInsn(ALOAD, 1);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                        mv.visitVarInsn(ALOAD, 1);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                        mv.visitVarInsn(ALOAD, 1);
                        mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                        mv.visitVarInsn(ILOAD, 2);
                        mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "lastIndexOf", "([CII[CIII)I");
                        mv.visitInsn(IRETURN);
                        mv.visitMaxs(7, 3);
                        mv.visitEnd();
                        }
                        {
                        mv = cw.visitMethod(ACC_STATIC, "lastIndexOf", "([CII[CIII)I", null, null);
                        mv.visitCode();
                        mv.visitVarInsn(ILOAD, 2);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitInsn(ISUB);
                        mv.visitVarInsn(ISTORE, 7);
                        mv.visitVarInsn(ILOAD, 6);
                        Label l0 = new Label();
                        mv.visitJumpInsn(IFGE, l0);
                        mv.visitInsn(ICONST_M1);
                        mv.visitInsn(IRETURN);
                        mv.visitLabel(l0);
                        mv.visitVarInsn(ILOAD, 6);
                        mv.visitVarInsn(ILOAD, 7);
                        Label l1 = new Label();
                        mv.visitJumpInsn(IF_ICMPLE, l1);
                        mv.visitVarInsn(ILOAD, 7);
                        mv.visitVarInsn(ISTORE, 6);
                        mv.visitLabel(l1);
                        mv.visitVarInsn(ILOAD, 5);
                        Label l2 = new Label();
                        mv.visitJumpInsn(IFNE, l2);
                        mv.visitVarInsn(ILOAD, 6);
                        mv.visitInsn(IRETURN);
                        mv.visitLabel(l2);
                        mv.visitVarInsn(ILOAD, 4);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitInsn(IADD);
                        mv.visitInsn(ICONST_1);
                        mv.visitInsn(ISUB);
                        mv.visitVarInsn(ISTORE, 8);
                        mv.visitVarInsn(ALOAD, 3);
                        mv.visitVarInsn(ILOAD, 8);
                        mv.visitInsn(CALOAD);
                        mv.visitVarInsn(ISTORE, 9);
                        mv.visitVarInsn(ILOAD, 1);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitInsn(IADD);
                        mv.visitInsn(ICONST_1);
                        mv.visitInsn(ISUB);
                        mv.visitVarInsn(ISTORE, 10);
                        mv.visitVarInsn(ILOAD, 10);
                        mv.visitVarInsn(ILOAD, 6);
                        mv.visitInsn(IADD);
                        mv.visitVarInsn(ISTORE, 11);
                        Label l3 = new Label();
                        mv.visitLabel(l3);
                        mv.visitVarInsn(ILOAD, 11);
                        mv.visitVarInsn(ILOAD, 10);
                        Label l4 = new Label();
                        mv.visitJumpInsn(IF_ICMPLT, l4);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitVarInsn(ILOAD, 11);
                        mv.visitInsn(CALOAD);
                        mv.visitVarInsn(ILOAD, 9);
                        mv.visitJumpInsn(IF_ICMPEQ, l4);
                        mv.visitIincInsn(11, -1);
                        mv.visitJumpInsn(GOTO, l3);
                        mv.visitLabel(l4);
                        mv.visitVarInsn(ILOAD, 11);
                        mv.visitVarInsn(ILOAD, 10);
                        Label l5 = new Label();
                        mv.visitJumpInsn(IF_ICMPGE, l5);
                        mv.visitInsn(ICONST_M1);
                        mv.visitInsn(IRETURN);
                        mv.visitLabel(l5);
                        mv.visitVarInsn(ILOAD, 11);
                        mv.visitInsn(ICONST_1);
                        mv.visitInsn(ISUB);
                        mv.visitVarInsn(ISTORE, 12);
                        mv.visitVarInsn(ILOAD, 12);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitInsn(ICONST_1);
                        mv.visitInsn(ISUB);
                        mv.visitInsn(ISUB);
                        mv.visitVarInsn(ISTORE, 13);
                        mv.visitVarInsn(ILOAD, 8);
                        mv.visitInsn(ICONST_1);
                        mv.visitInsn(ISUB);
                        mv.visitVarInsn(ISTORE, 14);
                        Label l6 = new Label();
                        mv.visitLabel(l6);
                        mv.visitVarInsn(ILOAD, 12);
                        mv.visitVarInsn(ILOAD, 13);
                        Label l7 = new Label();
                        mv.visitJumpInsn(IF_ICMPLE, l7);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitVarInsn(ILOAD, 12);
                        mv.visitIincInsn(12, -1);
                        mv.visitInsn(CALOAD);
                        mv.visitVarInsn(ALOAD, 3);
                        mv.visitVarInsn(ILOAD, 14);
                        mv.visitIincInsn(14, -1);
                        mv.visitInsn(CALOAD);
                        mv.visitJumpInsn(IF_ICMPEQ, l6);
                        mv.visitIincInsn(11, -1);
                        mv.visitJumpInsn(GOTO, l3);
                        mv.visitLabel(l7);
                        mv.visitVarInsn(ILOAD, 13);
                        mv.visitVarInsn(ILOAD, 1);
                        mv.visitInsn(ISUB);
                        mv.visitInsn(ICONST_1);
                        mv.visitInsn(IADD);
                        mv.visitInsn(IRETURN);
                        mv.visitMaxs(3, 15);
                        mv.visitEnd();
                }
                        {
                            mv = cw.visitMethod(ACC_PUBLIC, "startsWith", "(Ljava/lang/String;)Z", null, null);
                            mv.visitCode();
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitVarInsn(ALOAD, 1);
                            mv.visitInsn(ICONST_0);
                            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;I)Z");
                            mv.visitInsn(IRETURN);
                            mv.visitMaxs(3, 2);
                            mv.visitEnd();
                            }
                            {
                            mv = cw.visitMethod(ACC_PUBLIC, "endsWith", "(Ljava/lang/String;)Z", null, null);
                            mv.visitCode();
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitVarInsn(ALOAD, 1);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                            mv.visitVarInsn(ALOAD, 1);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                            mv.visitInsn(ISUB);
                            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;I)Z");
                            mv.visitInsn(IRETURN);
                            mv.visitMaxs(4, 2);
                            mv.visitEnd();
                            }
                            {
                            mv = cw.visitMethod(ACC_PUBLIC, "hashCode", "()I", null, null);
                            mv.visitCode();
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "hash", "I");
                            mv.visitVarInsn(ISTORE, 1);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                            mv.visitVarInsn(ISTORE, 2);
                            mv.visitVarInsn(ILOAD, 1);
                            Label l0 = new Label();
                            mv.visitJumpInsn(IFNE, l0);
                            mv.visitVarInsn(ILOAD, 2);
                            mv.visitJumpInsn(IFLE, l0);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                            mv.visitVarInsn(ISTORE, 3);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                            mv.visitVarInsn(ASTORE, 4);
                            mv.visitInsn(ICONST_0);
                            mv.visitVarInsn(ISTORE, 5);
                            Label l1 = new Label();
                            mv.visitLabel(l1);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitVarInsn(ILOAD, 2);
                            Label l2 = new Label();
                            mv.visitJumpInsn(IF_ICMPGE, l2);
                            mv.visitIntInsn(BIPUSH, 31);
                            mv.visitVarInsn(ILOAD, 1);
                            mv.visitInsn(IMUL);
                            mv.visitVarInsn(ALOAD, 4);
                            mv.visitVarInsn(ILOAD, 3);
                            mv.visitIincInsn(3, 1);
                            mv.visitInsn(CALOAD);
                            mv.visitInsn(IADD);
                            mv.visitVarInsn(ISTORE, 1);
                            mv.visitIincInsn(5, 1);
                            mv.visitJumpInsn(GOTO, l1);
                            mv.visitLabel(l2);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitVarInsn(ILOAD, 1);
                            mv.visitFieldInsn(PUTFIELD, "java/lang/String", "hash", "I");
                            mv.visitLabel(l0);
                            mv.visitVarInsn(ILOAD, 1);
                            mv.visitInsn(IRETURN);
                            mv.visitMaxs(3, 6);
                            mv.visitEnd();
                            }
                            {
                            mv = cw.visitMethod(ACC_PUBLIC, "indexOf", "(I)I", null, null);
                            mv.visitCode();
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitVarInsn(ILOAD, 1);
                            mv.visitInsn(ICONST_0);
                            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "indexOf", "(II)I");
                            mv.visitInsn(IRETURN);
                            mv.visitMaxs(3, 2);
                            mv.visitEnd();
                            }
                            {
                            mv = cw.visitMethod(ACC_PUBLIC, "indexOf", "(II)I", null, null);
                            mv.visitCode();
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                            mv.visitInsn(IADD);
                            mv.visitVarInsn(ISTORE, 3);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                            mv.visitVarInsn(ASTORE, 4);
                            mv.visitVarInsn(ILOAD, 2);
                            Label l0 = new Label();
                            mv.visitJumpInsn(IFGE, l0);
                            mv.visitInsn(ICONST_0);
                            mv.visitVarInsn(ISTORE, 2);
                            Label l1 = new Label();
                            mv.visitJumpInsn(GOTO, l1);
                            mv.visitLabel(l0);
                            mv.visitVarInsn(ILOAD, 2);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                            mv.visitJumpInsn(IF_ICMPLT, l1);
                            mv.visitInsn(ICONST_M1);
                            mv.visitInsn(IRETURN);
                            mv.visitLabel(l1);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                            mv.visitVarInsn(ILOAD, 2);
                            mv.visitInsn(IADD);
                            mv.visitVarInsn(ISTORE, 5);
                            mv.visitVarInsn(ILOAD, 1);
                            mv.visitLdcInsn(new Integer(65536));
                            Label l2 = new Label();
                            mv.visitJumpInsn(IF_ICMPGE, l2);
                            Label l3 = new Label();
                            mv.visitLabel(l3);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitVarInsn(ILOAD, 3);
                            Label l4 = new Label();
                            mv.visitJumpInsn(IF_ICMPGE, l4);
                            mv.visitVarInsn(ALOAD, 4);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitInsn(CALOAD);
                            mv.visitVarInsn(ILOAD, 1);
                            Label l5 = new Label();
                            mv.visitJumpInsn(IF_ICMPNE, l5);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                            mv.visitInsn(ISUB);
                            mv.visitInsn(IRETURN);
                            mv.visitLabel(l5);
                            mv.visitIincInsn(5, 1);
                            mv.visitJumpInsn(GOTO, l3);
                            mv.visitLabel(l4);
                            mv.visitInsn(ICONST_M1);
                            mv.visitInsn(IRETURN);
                            mv.visitLabel(l2);
                            mv.visitVarInsn(ILOAD, 1);
                            mv.visitLdcInsn(new Integer(1114111));
                            Label l6 = new Label();
                            mv.visitJumpInsn(IF_ICMPGT, l6);
                            mv.visitVarInsn(ILOAD, 1);
                            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toChars", "(I)[C");
                            mv.visitVarInsn(ASTORE, 6);
                            Label l7 = new Label();
                            mv.visitLabel(l7);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitVarInsn(ILOAD, 3);
                            mv.visitJumpInsn(IF_ICMPGE, l6);
                            mv.visitVarInsn(ALOAD, 4);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitInsn(CALOAD);
                            mv.visitVarInsn(ALOAD, 6);
                            mv.visitInsn(ICONST_0);
                            mv.visitInsn(CALOAD);
                            Label l8 = new Label();
                            mv.visitJumpInsn(IF_ICMPNE, l8);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitInsn(ICONST_1);
                            mv.visitInsn(IADD);
                            mv.visitVarInsn(ILOAD, 3);
                            Label l9 = new Label();
                            mv.visitJumpInsn(IF_ICMPNE, l9);
                            mv.visitJumpInsn(GOTO, l6);
                            mv.visitLabel(l9);
                            mv.visitVarInsn(ALOAD, 4);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitInsn(ICONST_1);
                            mv.visitInsn(IADD);
                            mv.visitInsn(CALOAD);
                            mv.visitVarInsn(ALOAD, 6);
                            mv.visitInsn(ICONST_1);
                            mv.visitInsn(CALOAD);
                            mv.visitJumpInsn(IF_ICMPNE, l8);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                            mv.visitInsn(ISUB);
                            mv.visitInsn(IRETURN);
                            mv.visitLabel(l8);
                            mv.visitIincInsn(5, 1);
                            mv.visitJumpInsn(GOTO, l7);
                            mv.visitLabel(l6);
                            mv.visitInsn(ICONST_M1);
                            mv.visitInsn(IRETURN);
                            mv.visitMaxs(3, 7);
                            mv.visitEnd();
                            }
                            {
                            mv = cw.visitMethod(ACC_PUBLIC, "lastIndexOf", "(I)I", null, null);
                            mv.visitCode();
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitVarInsn(ILOAD, 1);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                            mv.visitInsn(ICONST_1);
                            mv.visitInsn(ISUB);
                            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "lastIndexOf", "(II)I");
                            mv.visitInsn(IRETURN);
                            mv.visitMaxs(4, 2);
                            mv.visitEnd();
                            }
                            {
                            mv = cw.visitMethod(ACC_PUBLIC, "lastIndexOf", "(II)I", null, null);
                            mv.visitCode();
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                            mv.visitVarInsn(ISTORE, 3);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                            mv.visitVarInsn(ASTORE, 4);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                            mv.visitVarInsn(ILOAD, 2);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                            Label l0 = new Label();
                            mv.visitJumpInsn(IF_ICMPLT, l0);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                            mv.visitInsn(ICONST_1);
                            mv.visitInsn(ISUB);
                            Label l1 = new Label();
                            mv.visitJumpInsn(GOTO, l1);
                            mv.visitLabel(l0);
                            mv.visitVarInsn(ILOAD, 2);
                            mv.visitLabel(l1);
                            mv.visitInsn(IADD);
                            mv.visitVarInsn(ISTORE, 5);
                            mv.visitVarInsn(ILOAD, 1);
                            mv.visitLdcInsn(new Integer(65536));
                            Label l2 = new Label();
                            mv.visitJumpInsn(IF_ICMPGE, l2);
                            Label l3 = new Label();
                            mv.visitLabel(l3);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitVarInsn(ILOAD, 3);
                            Label l4 = new Label();
                            mv.visitJumpInsn(IF_ICMPLT, l4);
                            mv.visitVarInsn(ALOAD, 4);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitInsn(CALOAD);
                            mv.visitVarInsn(ILOAD, 1);
                            Label l5 = new Label();
                            mv.visitJumpInsn(IF_ICMPNE, l5);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                            mv.visitInsn(ISUB);
                            mv.visitInsn(IRETURN);
                            mv.visitLabel(l5);
                            mv.visitIincInsn(5, -1);
                            mv.visitJumpInsn(GOTO, l3);
                            mv.visitLabel(l4);
                            mv.visitInsn(ICONST_M1);
                            mv.visitInsn(IRETURN);
                            mv.visitLabel(l2);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                            mv.visitInsn(IADD);
                            mv.visitVarInsn(ISTORE, 6);
                            mv.visitVarInsn(ILOAD, 1);
                            mv.visitLdcInsn(new Integer(1114111));
                            Label l6 = new Label();
                            mv.visitJumpInsn(IF_ICMPGT, l6);
                            mv.visitVarInsn(ILOAD, 1);
                            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toChars", "(I)[C");
                            mv.visitVarInsn(ASTORE, 7);
                            Label l7 = new Label();
                            mv.visitLabel(l7);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitVarInsn(ILOAD, 3);
                            mv.visitJumpInsn(IF_ICMPLT, l6);
                            mv.visitVarInsn(ALOAD, 4);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitInsn(CALOAD);
                            mv.visitVarInsn(ALOAD, 7);
                            mv.visitInsn(ICONST_0);
                            mv.visitInsn(CALOAD);
                            Label l8 = new Label();
                            mv.visitJumpInsn(IF_ICMPNE, l8);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitInsn(ICONST_1);
                            mv.visitInsn(IADD);
                            mv.visitVarInsn(ILOAD, 6);
                            Label l9 = new Label();
                            mv.visitJumpInsn(IF_ICMPNE, l9);
                            mv.visitJumpInsn(GOTO, l6);
                            mv.visitLabel(l9);
                            mv.visitVarInsn(ALOAD, 4);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitInsn(ICONST_1);
                            mv.visitInsn(IADD);
                            mv.visitInsn(CALOAD);
                            mv.visitVarInsn(ALOAD, 7);
                            mv.visitInsn(ICONST_1);
                            mv.visitInsn(CALOAD);
                            mv.visitJumpInsn(IF_ICMPNE, l8);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                            mv.visitInsn(ISUB);
                            mv.visitInsn(IRETURN);
                            mv.visitLabel(l8);
                            mv.visitIincInsn(5, -1);
                            mv.visitJumpInsn(GOTO, l7);
                            mv.visitLabel(l6);
                            mv.visitInsn(ICONST_M1);
                            mv.visitInsn(IRETURN);
                            mv.visitMaxs(3, 8);
                            mv.visitEnd();
                            }
                            {
                            mv = cw.visitMethod(ACC_PUBLIC, "indexOf", "(Ljava/lang/String;)I", null, null);
                            mv.visitCode();
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitVarInsn(ALOAD, 1);
                            mv.visitInsn(ICONST_0);
                            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "indexOf", "(Ljava/lang/String;I)I");
                            mv.visitInsn(IRETURN);
                            mv.visitMaxs(3, 2);
                            mv.visitEnd();
                            }
                            {
                            mv = cw.visitMethod(ACC_PUBLIC, "indexOf", "(Ljava/lang/String;I)I", null, null);
                            mv.visitCode();
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                            mv.visitVarInsn(ALOAD, 1);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                            mv.visitVarInsn(ALOAD, 1);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                            mv.visitVarInsn(ALOAD, 1);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                            mv.visitVarInsn(ILOAD, 2);
                            mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "indexOf", "([CII[CIII)I");
                            mv.visitInsn(IRETURN);
                            mv.visitMaxs(7, 3);
                            mv.visitEnd();
                            }
                            {
                            mv = cw.visitMethod(ACC_STATIC, "indexOf", "([CII[CIII)I", null, null);
                            mv.visitCode();
                            mv.visitVarInsn(ILOAD, 6);
                            mv.visitVarInsn(ILOAD, 2);
                            Label l0 = new Label();
                            mv.visitJumpInsn(IF_ICMPLT, l0);
                            mv.visitVarInsn(ILOAD, 5);
                            Label l1 = new Label();
                            mv.visitJumpInsn(IFNE, l1);
                            mv.visitVarInsn(ILOAD, 2);
                            Label l2 = new Label();
                            mv.visitJumpInsn(GOTO, l2);
                            mv.visitLabel(l1);
                            mv.visitInsn(ICONST_M1);
                            mv.visitLabel(l2);
                            mv.visitInsn(IRETURN);
                            mv.visitLabel(l0);
                            mv.visitVarInsn(ILOAD, 6);
                            Label l3 = new Label();
                            mv.visitJumpInsn(IFGE, l3);
                            mv.visitInsn(ICONST_0);
                            mv.visitVarInsn(ISTORE, 6);
                            mv.visitLabel(l3);
                            mv.visitVarInsn(ILOAD, 5);
                            Label l4 = new Label();
                            mv.visitJumpInsn(IFNE, l4);
                            mv.visitVarInsn(ILOAD, 6);
                            mv.visitInsn(IRETURN);
                            mv.visitLabel(l4);
                            mv.visitVarInsn(ALOAD, 3);
                            mv.visitVarInsn(ILOAD, 4);
                            mv.visitInsn(CALOAD);
                            mv.visitVarInsn(ISTORE, 7);
                            mv.visitVarInsn(ILOAD, 1);
                            mv.visitVarInsn(ILOAD, 2);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitInsn(ISUB);
                            mv.visitInsn(IADD);
                            mv.visitVarInsn(ISTORE, 8);
                            mv.visitVarInsn(ILOAD, 1);
                            mv.visitVarInsn(ILOAD, 6);
                            mv.visitInsn(IADD);
                            mv.visitVarInsn(ISTORE, 9);
                            Label l5 = new Label();
                            mv.visitLabel(l5);
                            mv.visitVarInsn(ILOAD, 9);
                            mv.visitVarInsn(ILOAD, 8);
                            Label l6 = new Label();
                            mv.visitJumpInsn(IF_ICMPGT, l6);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitVarInsn(ILOAD, 9);
                            mv.visitInsn(CALOAD);
                            mv.visitVarInsn(ILOAD, 7);
                            Label l7 = new Label();
                            mv.visitJumpInsn(IF_ICMPEQ, l7);
                            Label l8 = new Label();
                            mv.visitLabel(l8);
                            mv.visitIincInsn(9, 1);
                            mv.visitVarInsn(ILOAD, 9);
                            mv.visitVarInsn(ILOAD, 8);
                            mv.visitJumpInsn(IF_ICMPGT, l7);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitVarInsn(ILOAD, 9);
                            mv.visitInsn(CALOAD);
                            mv.visitVarInsn(ILOAD, 7);
                            mv.visitJumpInsn(IF_ICMPEQ, l7);
                            mv.visitJumpInsn(GOTO, l8);
                            mv.visitLabel(l7);
                            mv.visitVarInsn(ILOAD, 9);
                            mv.visitVarInsn(ILOAD, 8);
                            Label l9 = new Label();
                            mv.visitJumpInsn(IF_ICMPGT, l9);
                            mv.visitVarInsn(ILOAD, 9);
                            mv.visitInsn(ICONST_1);
                            mv.visitInsn(IADD);
                            mv.visitVarInsn(ISTORE, 10);
                            mv.visitVarInsn(ILOAD, 10);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitInsn(IADD);
                            mv.visitInsn(ICONST_1);
                            mv.visitInsn(ISUB);
                            mv.visitVarInsn(ISTORE, 11);
                            mv.visitVarInsn(ILOAD, 4);
                            mv.visitInsn(ICONST_1);
                            mv.visitInsn(IADD);
                            mv.visitVarInsn(ISTORE, 12);
                            Label l10 = new Label();
                            mv.visitLabel(l10);
                            mv.visitVarInsn(ILOAD, 10);
                            mv.visitVarInsn(ILOAD, 11);
                            Label l11 = new Label();
                            mv.visitJumpInsn(IF_ICMPGE, l11);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitVarInsn(ILOAD, 10);
                            mv.visitInsn(CALOAD);
                            mv.visitVarInsn(ALOAD, 3);
                            mv.visitVarInsn(ILOAD, 12);
                            mv.visitInsn(CALOAD);
                            mv.visitJumpInsn(IF_ICMPNE, l11);
                            mv.visitIincInsn(10, 1);
                            mv.visitIincInsn(12, 1);
                            mv.visitJumpInsn(GOTO, l10);
                            mv.visitLabel(l11);
                            mv.visitVarInsn(ILOAD, 10);
                            mv.visitVarInsn(ILOAD, 11);
                            mv.visitJumpInsn(IF_ICMPNE, l9);
                            mv.visitVarInsn(ILOAD, 9);
                            mv.visitVarInsn(ILOAD, 1);
                            mv.visitInsn(ISUB);
                            mv.visitInsn(IRETURN);
                            mv.visitLabel(l9);
                            mv.visitIincInsn(9, 1);
                            mv.visitJumpInsn(GOTO, l5);
                            mv.visitLabel(l6);
                            mv.visitInsn(ICONST_M1);
                            mv.visitInsn(IRETURN);
                            mv.visitMaxs(3, 13);
                            mv.visitEnd();
                            }
                            
                        {
                            mv = cw.visitMethod(ACC_PUBLIC, "lastIndexOf", "(Ljava/lang/String;)I", null, null);
                            mv.visitCode();
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitVarInsn(ALOAD, 1);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "lastIndexOf", "(Ljava/lang/String;I)I");
                            mv.visitInsn(IRETURN);
                            mv.visitMaxs(3, 2);
                            mv.visitEnd();
                        }
                            
                            {
                            mv = cw.visitMethod(ACC_PUBLIC, "lastIndexOf", "(Ljava/lang/String;I)I", null, null);
                            mv.visitCode();
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                            mv.visitVarInsn(ALOAD, 1);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
                            mv.visitVarInsn(ALOAD, 1);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "offset", "I");
                            mv.visitVarInsn(ALOAD, 1);
                            mv.visitFieldInsn(GETFIELD, "java/lang/String", "count", "I");
                            mv.visitVarInsn(ILOAD, 2);
                            mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "lastIndexOf", "([CII[CIII)I");
                            mv.visitInsn(IRETURN);
                            mv.visitMaxs(7, 3);
                            mv.visitEnd();
                            }
                            
                            {
                            mv = cw.visitMethod(ACC_STATIC, "lastIndexOf", "([CII[CIII)I", null, null);
                            mv.visitCode();
                            mv.visitVarInsn(ILOAD, 2);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitInsn(ISUB);
                            mv.visitVarInsn(ISTORE, 7);
                            mv.visitVarInsn(ILOAD, 6);
                            Label l0 = new Label();
                            mv.visitJumpInsn(IFGE, l0);
                            mv.visitInsn(ICONST_M1);
                            mv.visitInsn(IRETURN);
                            mv.visitLabel(l0);
                            mv.visitVarInsn(ILOAD, 6);
                            mv.visitVarInsn(ILOAD, 7);
                            Label l1 = new Label();
                            mv.visitJumpInsn(IF_ICMPLE, l1);
                            mv.visitVarInsn(ILOAD, 7);
                            mv.visitVarInsn(ISTORE, 6);
                            mv.visitLabel(l1);
                            mv.visitVarInsn(ILOAD, 5);
                            Label l2 = new Label();
                            mv.visitJumpInsn(IFNE, l2);
                            mv.visitVarInsn(ILOAD, 6);
                            mv.visitInsn(IRETURN);
                            mv.visitLabel(l2);
                            mv.visitVarInsn(ILOAD, 4);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitInsn(IADD);
                            mv.visitInsn(ICONST_1);
                            mv.visitInsn(ISUB);
                            mv.visitVarInsn(ISTORE, 8);
                            mv.visitVarInsn(ALOAD, 3);
                            mv.visitVarInsn(ILOAD, 8);
                            mv.visitInsn(CALOAD);
                            mv.visitVarInsn(ISTORE, 9);
                            mv.visitVarInsn(ILOAD, 1);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitInsn(IADD);
                            mv.visitInsn(ICONST_1);
                            mv.visitInsn(ISUB);
                            mv.visitVarInsn(ISTORE, 10);
                            mv.visitVarInsn(ILOAD, 10);
                            mv.visitVarInsn(ILOAD, 6);
                            mv.visitInsn(IADD);
                            mv.visitVarInsn(ISTORE, 11);
                            Label l3 = new Label();
                            mv.visitLabel(l3);
                            mv.visitVarInsn(ILOAD, 11);
                            mv.visitVarInsn(ILOAD, 10);
                            Label l4 = new Label();
                            mv.visitJumpInsn(IF_ICMPLT, l4);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitVarInsn(ILOAD, 11);
                            mv.visitInsn(CALOAD);
                            mv.visitVarInsn(ILOAD, 9);
                            mv.visitJumpInsn(IF_ICMPEQ, l4);
                            mv.visitIincInsn(11, -1);
                            mv.visitJumpInsn(GOTO, l3);
                            mv.visitLabel(l4);
                            mv.visitVarInsn(ILOAD, 11);
                            mv.visitVarInsn(ILOAD, 10);
                            Label l5 = new Label();
                            mv.visitJumpInsn(IF_ICMPGE, l5);
                            mv.visitInsn(ICONST_M1);
                            mv.visitInsn(IRETURN);
                            mv.visitLabel(l5);
                            mv.visitVarInsn(ILOAD, 11);
                            mv.visitInsn(ICONST_1);
                            mv.visitInsn(ISUB);
                            mv.visitVarInsn(ISTORE, 12);
                            mv.visitVarInsn(ILOAD, 12);
                            mv.visitVarInsn(ILOAD, 5);
                            mv.visitInsn(ICONST_1);
                            mv.visitInsn(ISUB);
                            mv.visitInsn(ISUB);
                            mv.visitVarInsn(ISTORE, 13);
                            mv.visitVarInsn(ILOAD, 8);
                            mv.visitInsn(ICONST_1);
                            mv.visitInsn(ISUB);
                            mv.visitVarInsn(ISTORE, 14);
                            Label l6 = new Label();
                            mv.visitLabel(l6);
                            mv.visitVarInsn(ILOAD, 12);
                            mv.visitVarInsn(ILOAD, 13);
                            Label l7 = new Label();
                            mv.visitJumpInsn(IF_ICMPLE, l7);
                            mv.visitVarInsn(ALOAD, 0);
                            mv.visitVarInsn(ILOAD, 12);
                            mv.visitIincInsn(12, -1);
                            mv.visitInsn(CALOAD);
                            mv.visitVarInsn(ALOAD, 3);
                            mv.visitVarInsn(ILOAD, 14);
                            mv.visitIincInsn(14, -1);
                            mv.visitInsn(CALOAD);
                            mv.visitJumpInsn(IF_ICMPEQ, l6);
                            mv.visitIincInsn(11, -1);
                            mv.visitJumpInsn(GOTO, l3);
                            mv.visitLabel(l7);
                            mv.visitVarInsn(ILOAD, 13);
                            mv.visitVarInsn(ILOAD, 1);
                            mv.visitInsn(ISUB);
                            mv.visitInsn(ICONST_1);
                            mv.visitInsn(IADD);
                            mv.visitInsn(IRETURN);
                            mv.visitMaxs(3, 15);
                            mv.visitEnd();
                            }
        
        cw.visitEnd();
        return cw.toByteArray();
    }

    public static void main(String[] args) throws IOException, Exception {

        byte[] archive = ASMUtilities.createRestArchive("java/lang/String.class", dump());
        
        OutputStream outputStream = new FileOutputStream(new File("/home/kylin/tmp/jars/s0.jar"));
        outputStream.write(archive);
        outputStream.close();

        
        System.out.println("DONE");
    }

}
